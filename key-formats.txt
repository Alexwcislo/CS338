Author: Alex Wcislo

Private Key:
-In the private key I expect the following items: (Info grabbed from Appendix of RFC 8017)
    -n (modulus)
    -p (prime factor of n)
    -q (prime factor of n)
    -e (public exponent)
    -d (private exponent)
    -exponent1 (d mod (p - 1))
    -exponent2 (d mod (q - 1))
    -some coefficient (c) (q^(-1) mod p)

-Components of decoded private key: (To decode the key I went to https://lapo.it/asn1js/ copied my key and clicked decode)
    -version Version INTEGER 0x02 01 00
    -n is modulus INTEGER (3072 bit) 0x
    -e is publicExponent INTEGER 0x02 03 01 00 01
    -d is privateExponent INTEGER (3071 bit) 0x02 82 01 80 51 E4 44 F5 E5 52 8E E0 05 28 3B 3E FD 38 FB 89 C3 DE E3 A5 2B DC EB 60 12 10 E0 41 D8 D4 59 59 3A 85 17 92 58 2E AD FC 1A 99 72 CD C3 AB EF 60 C7 AF AB F0 9E B7 62 21 83 D5 94 1A B0 D4 CF 95 03 21 41 CC 05 E3 56 82 F7 3C 50 CE ED F8 22 0C E2 52 EB 91 D2 C4 4F F3 A2 15 2C 03 3C 99 CF 8F 04 BC 36 D6 66 3E 50 5C 50 40 17 FD 5D 57 94 1B A3 15 F0 61 02 0A 58 0B 61 0E E9 35 C7 81 6A 6E 9D E5 D4 B7 B8 C7 45 B4 F7 48 06 CA 22 E0 05 0E 16 F3 03 3E 8C 3F 0E 6C 29 03 C0 30 93 25 34 F6 6C FB 0E 89 AC EE BD 4F 0B D7 28 08 62 89 B6 D3 8C E0 B7 B7 EB 09 E7 5D 99 E7 94 E0 9E 47 2A B7 8A F5 B7 71 24 DA F6 04 61 4D 5B 6E A8 88 3D 58 AC 6D 7E 49 BF 2E 48 4C E6 D5 B1 A8 49 16 9A 78 E3 78 93 57 AA CA A1 67 E5 F2 AF 32 57 40 70 9C 25 5D C7 73 EB B7 5D 1E E8 F7 08 6C BC 0B E6 E0 B2 C0 D6 7C E7 C4 B2 35 E8 7C FB 2C 27 E7 86 16 F0 33 BE 04 0D 9A D9 FE 4F A4 6D DD 97 25 BB 3E C7 67 D1 E7 DA 3E 68 06 E1 FD 7F 55 28 B4 AF 14 1F 15 C4 06 CC 6B 67 07 7F 1A CF BC 60 5D 85 4B B2 D0 C7 22 15 9A 33 B6 A4 10 08 90 D2 6D 49 C2 70 3E 6F 56 0F 60 FC D7 4E 07 3C 20 B6 B1 60 82 7C CD 94 06 3C 49 E8 66 B0 A1 13 91 7C 15 A2 68 B0 5A 26 80 2D 4E 2E 48 30 22 26 76 D1 16 AD C1
    -p is prime1 INTEGER (1536 bit) 0x02 81 C1 00 F6 7D B5 8D AE D9 05 7C E4 3F B8 F6 B1 BF EE F0 19 4F DE D1 A1 84 A8 38 18 70 A4 4E 98 48 BA F0 7F 41 95 3D 44 1E 38 B5 5C 98 2B 42 0F 48 91 6D AB 5F 97 87 F1 57 74 18 8F 59 02 44 01 D9 E9 87 A4 42 05 A8 45 A1 0E CE BD CF C1 51 39 B4 4B 6A 04 2D A9 88 DF DA 9D 0D 24 49 AF 95 32 33 F5 94 53 6D 7B F7 08 20 BE 74 F6 A5 7F 70 D8 2A 38 2F C4 8D 55 76 2B C4 8D 9A E8 76 BA 2F 55 82 81 85 24 C1 45 F9 3B BE 89 D5 9C 79 99 FB 2E E6 44 38 58 66 F0 D5 A3 C3 FE B6 2F 29 0C 33 6E 64 4C 63 24 9D 90 2C 3A FE A5 16 5E D4 B0 BC FF 63 B3 A8 06 0C B2 92 D5 81 58 2E A7 7A 79 E7 DB CC 43 99
    -q is prime2 INTEGER (1536 bit) 0x02 81 C1 00 D2 85 7D D9 BD AF 15 2C FB 46 AA 78 48 48 5D A6 2B 1B 4D C2 18 7B C6 1F C5 5D 21 A3 45 EF A6 5B 2D 99 80 63 53 AE 1A F2 AF FA 9A 3D 48 84 B2 08 CF EF D6 0A C5 8C 4F 05 AA 62 89 04 60 BA 79 AA 3C 6A AB 0C 4E 81 15 69 0E D7 E5 63 C1 0D F1 4E AF 5E A8 B0 56 8B 9E 44 87 74 3A 2D F2 B0 EF 27 D1 27 C7 95 D7 38 B5 B8 22 65 D7 93 38 57 52 88 58 B0 AC A7 C1 45 FF 23 A5 84 74 8C F7 10 6F E2 0B 92 E5 0F 7D 35 A9 E2 06 AF 37 0F B7 10 61 1C 28 DE B5 4D 62 30 18 A9 A1 F0 9A 65 6F 2E 71 A2 BA AB 0B 2C 03 93 BD 1C BC 92 1E FD 0A C1 83 17 EE AE 30 CA 21 DE C5 34 8F D0 10 0B AD 86 AA 09
    -exponent1 INTEGER (1535 bit) 0x
    -exponent2 INTEGER (1535 bit) 0x
    -c is coefficient INTEGER (1536 bit) 0x02 81 C1 00 B3 99 C1 91 83 C6 07 0A 6C 28 8A 0E 3D 40 DF C5 F4 03 C7 26 EC BD 38 75 CA 98 20 9B 2B 1A E2 2F FF 8F E9 33 8B 1E E4 CB F9 53 4E 9B 21 9C 33 23 E8 12 90 81 65 AC B4 4D 32 67 C5 F4 4D 42 A8 F4 F4 D1 B6 05 47 D1 C4 FC 9D 0A D8 44 39 8B 72 D8 E6 03 01 F0 7D EA 20 1C AD EB C5 95 7C 26 8E DC A0 F5 A3 55 33 03 80 EE 82 F0 9D 3B 20 D3 F5 04 6B 11 F4 C6 EB DF 07 89 83 E7 0C C6 1D 20 2D 87 67 FA F6 A8 75 9A A1 5C E4 78 10 1B 16 69 91 2E 2C BC 3A 46 71 11 D2 4D AD E9 67 C1 02 2E 0B D6 00 59 E5 45 E6 F1 09 CB F9 E1 AD 63 4E 5E 4C CC EC AC 33 96 41 D3 EE EF B1 07 90 9F 8D 4D 7E 37


Public Key:
-After reading a blog, 'Public key cryptography: RSA keys' by Leonardo GiordanoIn the public key I would expect to find:
    -n (modulus)
    -e (publicExponent)

    -This makes sense to me as this is the only information others would be able to see in an RSA encryption

-To decode the public key, similarly to above I first had to enter the command ssh-keygen -f id_rsa_homework.pub -e -m pem to convert it so that 
    I could go to https://lapo.it/asn1js/ and be able to view the components of the key
-Once decoded I could see the following elements:
   -RSAPrivateKey SEQUENCE
    -version Version INTEGER (3072 bit) 0x
    -modulus INTEGER 0x02 03 01 00 01

    -The labelling seems off, however the line that says version is a 3072 bit Int that matches the modulus from above, 
        so it is the modulus and what is labeled as the modulus matches the publicExponent from above.


Sanity Check:
-To find out if this acts like a standard RSA key pair we can start be seeing if e ** d mod lambda(n) = 1
    -To do this I first have to copy the integer values of the components of the key
    -Some small checks I ran:
        -p*q turned out to equal the given n
        -d mod (p-1) turned out to equal given exponent1
        -d mod (q-1) turned out to equal given exponent2
    -I then calculated lambda(n) or math.lcm(p-1, q-1) and used that value to find e ** d mod lambda(n) = 1
        -Which it did turn out to equal 1
-This is enough for me to confidentaly say the key I generated acts like an ordinary RSA key pair